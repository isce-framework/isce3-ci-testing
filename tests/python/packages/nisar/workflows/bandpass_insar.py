import argparse
import os

import h5py
import iscetest
import numpy as np
import numpy.testing as npt
from nisar.workflows import bandpass_insar, insar, prepare_insar_hdf5
from nisar.products.insar.product_paths import RIFGGroupsPaths
from nisar.workflows.insar_runconfig import InsarRunConfig
from nisar.workflows.persistence import Persistence


def test_bandpass_run():
    '''
    Check if bandpass_insar runs without crashing.
    '''
    # load yaml file
    test_yaml = os.path.join(iscetest.data, 'bandpass_test.yaml')
    with open(test_yaml) as fh_test_yaml:
        test_yaml = fh_test_yaml.read().replace('@ISCETEST@', iscetest.data).\
                replace('@TEST_OUTPUT@', 'rifg_bandpass.h5').\
                replace('@TEST_PRODUCT_TYPES@', 'RIFG')

    # Create CLI input namespace with yaml text instead of filepath
    args = argparse.Namespace(run_config_path=test_yaml, log_file=False)

    # Initialize runconfig object
    runconfig = InsarRunConfig(args)
    runconfig.geocode_common_arg_load()

    out_paths = prepare_insar_hdf5.run(runconfig.cfg)

    persist = Persistence('insar.log', restart=True)
    persist.run_steps['dense_offsets'] = False
    # input test data is missing mandatory metadata that
    # causes the test fail
    persist.run_steps['baseline'] = False
    persist.run_steps['solid_earth_tides'] = False
    insar.run(runconfig.cfg, out_paths, persist.run_steps)


def test_bandpass_validate():
    '''
    Validate products generated by bandpass workflow.
    '''
    scratch_path = '.'

    # Instantiate RIFG object to avoid hard-coding pahs to RIFG datasets
    group_path = f'{RIFGGroupsPaths().SwathsPath}/frequencyA/interferogram/HH'
    with h5py.File(os.path.join(scratch_path, 'rifg_bandpass.h5'), 'r') as h_rifg:

        # check if phase of generated interferogram is sufficiently close to 0.
        igram = h_rifg[f'{group_path}/wrappedInterferogram'][()]
        coh = h_rifg[f'{group_path}/coherenceMagnitude'][()]

        npt.assert_allclose(np.nanmean(coh[3:-2, 3:-2]), 1, atol=2 * 1e-2)


if __name__ == "__main__":
    test_bandpass_run()
    test_bandpass_validate()
