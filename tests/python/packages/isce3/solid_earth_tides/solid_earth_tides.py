import os
import tempfile

import isce3
from isce3.solid_earth_tides import solid_earth_tides
import iscetest
from nisar.products.readers import SLC
from nisar.workflows.geocode_corrections import (_compute_llh_coords,
                                                 _get_decimated_radar_grid,
                                                 _read_llh)
import numpy as np
from osgeo import gdal


def test_solid_earth_tides():
    '''
    test parameters shared by all tec_product tests
    '''
    input_h5_path = os.path.join(iscetest.data, "envisat.h5")

    radar_grid = isce3.product.RadarGridParameters(input_h5_path)

    # Init SLC object and extract necessary test params from it
    rslc = SLC(hdf5file=input_h5_path)

    orbit = rslc.getOrbit()

    center_freq = rslc.getSwathMetadata().processed_center_frequency

    # Create DEM raster object
    dem_path = os.path.join(iscetest.data, "geocode/zeroHeightDEM.geo")
    dem_raster = isce3.io.Raster(dem_path)
    epsg = dem_raster.get_epsg()
    proj = isce3.core.make_projection(epsg)
    ellipsoid = proj.ellipsoid

    # Decimate radar grid to 5km resolution in azimuth and slant range
    radar_grid_scaled = _get_decimated_radar_grid(radar_grid,
                                                  orbit)

    # Spoof a dict with parameters needed for testing.
    cfg = {}
    cfg["worker"] = {}
    cfg["worker"]["gpu_id"] = 0

    for pu in ("cpu", "gpu"):
        if not hasattr(isce3, "cuda"):
            continue

        cfg["worker"]["gpu_enabled"] = True if pu == "gpu" else False
        scratch_path = tempfile.TemporaryDirectory(prefix=pu)

        # Compute latitude and longitude over decimated radar grid
        _compute_llh_coords(cfg,
                            radar_grid_scaled,
                            dem_raster,
                            orbit,
                            scratch_path.name)
        (x_pts_to_interp,
         y_pts_to_interp,
         z_pts_to_interp)= _read_llh(scratch_path.name)

        # Compute solid earth tides over decimated/scaled radar grid
        set_rg, set_az = solid_earth_tides(radar_grid_scaled,
                                           x_pts_to_interp,
                                           y_pts_to_interp,
                                           z_pts_to_interp,
                                           orbit,
                                           ellipsoid)

        # Ensure arrays generated by SET are the same size as scaled radar
        # grid.
        for set_rg_az, rg_az in zip((set_rg, set_az), ("range", "azimuth")):
            np.testing.assert_equal(set_rg_az.shape,
                                    radar_grid_scaled.shape,
                                    f"")
