#!/usr/bin/env python3
from isce3.geometry import (get_dem_boundary_polygon, compute_dem_overlap,
    DEMInterpolator, compute_polygon_overlap)
from isce3.io import Raster
import iscetest
import numpy.testing as npt
from pathlib import Path
import pytest
import shapely
import shapely.wkt
import tempfile

swath_wkt = """POLYGON ((117.888163837239 -84.2118220075399 2990.49633788733,
116.251653034631 -84.4162809608174 3030.64379882838,
114.575602254013 -84.6068979334439 3049.47436523433,
112.851369088676 -84.7854366535688 3063.28344742364,
111.072375877864 -84.9530867356406 3077.35302726827,
109.232228402045 -85.1107722656671 3104.32080142222,
107.328799294971 -85.2588982368456 3117.87475585805,
105.357056187039 -85.398012774732 3131.92675666838,
103.314720227112 -85.5283738306823 3138.20581054558,
101.198758246222 -85.6502393587807 3144.77661132678,
99.0060639162927 -85.7638136042832 3168.62182617078,
98.4398206418436 -85.6998465772745 3175.34643554682,
97.8901750218018 -85.635474182186 3179.30541991121,
97.3555164570419 -85.5707615365582 3190.7871093764,
96.8360306919643 -85.5056869487819 3201.78588999907,
96.3310651846861 -85.4402698231061 3213.17626952972,
95.8401063655807 -85.3745232070629 3224.62475585627,
95.3614337354962 -85.3085176214213 3249.11987175905,
94.8980034804499 -85.2421025542711 3249.18139648448,
94.4457297357417 -85.1754610534524 3263.96093750241,
94.0067719632826 -85.108481678145 3264.64599610402,
96.0155811987474 -85.0094167050841 3260.58520507749,
97.9803660402879 -84.9024206070757 3258.74804687578,
99.9017263256197 -84.7872469728022 3251.27514642212,
101.780713460056 -84.6635789772207 3232.68359372538,
103.617417924093 -84.5311198876276 3216.07666015629,
105.413845640634 -84.3893858881156 3200.97924804849,
107.189784631014 -84.2362048281896 2993.11621092928,
108.913674282977 -84.0737667905016 2993.11621093374,
110.608428896563 -83.8994327265794 2993.11621092869,
112.28005861355 -83.7116628637569 2993.11621087465,
112.800561227379 -83.7641031606533 2993.11621087494,
113.32967118027 -83.8160408124704 2993.11621087555,
113.867521079312 -83.8674630589505 2993.11621087413,
114.414242114074 -83.9183568369736 2993.1162107691,
114.964563237334 -83.9693744146496 3054.25195287572,
115.530359745602 -84.0190602445131 3043.68212766808,
116.105084204025 -84.0682151443923 3036.76489222766,
116.690376515728 -84.1166324386074 3016.16455029121,
117.28417860623 -84.1645728509571 3006.69628906015,
117.888163837239 -84.2118220075399 2990.49633788733))"""


@pytest.fixture(scope="module")
def dem():
    path = Path(iscetest.data) / "dem_south_pole.tif"
    dem = DEMInterpolator()
    dem.load_dem(Raster(str(path)))
    dem.compute_min_max_mean_height()
    return dem


def test_dem_polygon_is_counter_clockwise(dem):
    ogr_poly = get_dem_boundary_polygon(dem)
    polygon = shapely.wkt.loads(ogr_poly.ExportToWkt())
    npt.assert_(shapely.is_ccw(polygon.boundary))


def test_dem_overlap(dem):
    area_outside = compute_dem_overlap(swath_wkt, dem)
    npt.assert_(area_outside > 0.0)

    with tempfile.NamedTemporaryFile("wb", suffix=".png") as plotfile:
        compute_dem_overlap(swath_wkt, dem, plot=plotfile)


def test_polygon_overlap():
    assert_close = lambda x, y: npt.assert_allclose(x, y, rtol=1e-4, atol=1e-4)

    # unit square on the equator
    poly1 = shapely.Polygon([
        (0, 0),
        (1, 0),
        (1, 1),
        (0, 1),
        (0, 0)])

    # should intersect itself perfectly
    area = compute_polygon_overlap(poly1, poly1)
    assert_close(area, 1.0)

    # longitude cut in half
    poly2 = shapely.Polygon([
        (0, 0),
        (0.5, 0),
        (0.5, 1),
        (0, 1),
        (0, 0)])

    # (poly1 & poly2) area should be roughly half of poly1
    area = compute_polygon_overlap(poly1, poly2)
    assert_close(area, 0.5)

    # (poly1 & poly2) area should be equal to poly2
    area = compute_polygon_overlap(poly2, poly1)
    assert_close(area, 1.0)


# Multi-polygon from NISAR track-frame database that crosses dateline.
frame_wkt = """MULTIPOLYGON (
    ((
        -180 -86.93351494421833,
        -180 -85.67329820801235,
        -176.41858605833175 -85.47678992804185,
        -172.58761215807797 -85.16336715752401,
        -167.26057668778017 -84.6041940393744,
        -162.55803815479385 -84.91026932816852,
        -157.30160955209132 -85.17894193160465,
        -151.4865089461282 -85.40365116429611,
        -145.1512536956411 -85.5776926804587,
        -148.28981793203536 -86.27646471917444,
        -150.81983569571807 -86.69098675828569,
        -161.53960479830096 -87.71445154088535,
        -171.29188919453088 -87.39667684299016,
        -178.77699368189093 -87.02143998752808,
        -180 -86.93351494421833
    )), ((
        180 -85.67329820801235,
        180 -86.93351494421833,
        175.4687658412843 -86.60775296429028,
        170.9831182256643 -86.16804468441288,
        180 -85.67329820801235
    ))
)"""

# Polygon of swath boundary that is self-intersecting on lat/lon grid due to
# a point that crosses the dateline.
boundary_wkt = """POLYGON Z ((
    -131.018281883793 -85.7513114099165 2611.8693847591,
    -133.813703182813 -85.738128996615 2611.86938476066,
    -136.58571108128 -85.7150804326073 2611.86938475978,
    -139.322233191171 -85.6823236817554 2611.86938476028,
    -142.01213618344 -85.6400775060542 2611.86938476034,
    -144.645465072702 -85.588614463348 2611.86938475964,
    -147.213612304006 -85.5282526817285 2611.86938475793,
    -149.709413646698 -85.4593469469792 2611.86938476068,
    -152.127174516543 -85.3822796200131 2611.86938475923,
    -154.462635465825 -85.2974518362352 2611.869384762,
    -156.712888815444 -85.2052753442016 2611.86938476044,
    -158.363394020616 -85.4552044140439 2611.86938476647,
    -160.121191482894 -85.6905726016942 2611.86938476435,
    -162.002950912259 -85.9129542708661 2611.8693847661,
    -164.026063101883 -86.12341097171 2611.86938476525,
    -166.208857588529 -86.32261863105 2611.8693847639,
    -168.570641158179 -86.5109463078551 2611.86938307831,
    -171.131533081016 -86.6885059888589 2611.86938533905,
    -173.912040825228 -86.8551849051289 2611.86938495862,
    -176.932295165357 -87.0106679757468 2611.86938483105,
    179.745594168083 -87.1562108269763 2962.80053596555,
    -177.444471978535 -87.3110076140952 2611.86938478937,
    -174.347744982577 -87.4606739483396 2611.86938479029,
    -170.878143997945 -87.6021659171298 2611.86938478887,
    -166.993073933662 -87.7339520342386 2611.86938479007,
    -162.654240958678 -87.8542434736132 2611.8693847887,
    -157.834466064458 -87.9610050320163 2611.86938478934,
    -152.52703807872 -88.0520110690572 2611.86938478787,
    -146.756589158468 -88.1249662244352 2611.86938478992,
    -140.588688434166 -88.1777013494317 2611.86938479099,
    -134.133636001371 -88.2084301051087 2611.86938479068,
    -133.545311622762 -87.9890678763733 2611.86938483302,
    -133.065016811261 -87.7655615134054 2611.86938495912,
    -132.664989587951 -87.5374962070338 2611.86938534065,
    -132.326143341874 -87.3043611201308 2611.86938308793,
    -132.034912819594 -87.0655318299012 2611.86938476474,
    -131.781376852529 -86.8202427010375 2611.86938476444,
    -131.558091722572 -86.5675460499 2611.86938476432,
    -131.359337599208 -86.3062520448843 2611.86938476435,
    -131.180613152637 -86.0348385537415 2611.86938476545,
    -131.018281883793 -85.7513114099165 2611.8693847591
))"""


def test_multi_polygon_overlap():
    # make sure the comparison works with multi-polygons
    boundary_poly = shapely.wkt.loads(boundary_wkt)
    frame_multi = shapely.wkt.loads(frame_wkt)
    area_fraction = compute_polygon_overlap(frame_multi, boundary_poly)
    # If convert both shapes to an appropriate SRS (e.g., EPSG:3031) then it
    # looks like they overlap around 50%
    npt.assert_(0.4 < area_fraction < 0.6)
