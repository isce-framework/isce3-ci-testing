#!groovy

pipeline {
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }
  agent any
  environment {
    // Personal Access Token (PAT) for authenticating github-fn transactions
    // for the CI server. Secret credentials are managed via the Jenkins UI.
    RTBURNS_PAT = credentials("${params.RTBURNS_PAT}")
    GIT_OAUTH_TOKEN = credentials("${params.GIT_OAUTH_TOKEN}")

    // Artifactory API Key (username + password) with push access to
    // cae-artifactory.jpl.nasa.gov:1600{1,2}/gov/nasa/jpl/nisar/adt.
    // A string in '<username>:<password>' format.
    ARTIFACTORY_API_KEY = credentials("${params.ARTIFACTORY_API_KEY}")
  }
  stages {
    stage("Set up Docker images with ISCE3 build prereqs") {
      steps {
        sh "/usr/local/bin/python3 tools/run.py setup"
      }
    }
    stage("Configure ISCE3") {
      steps {
        sh "/usr/local/bin/python3 tools/run.py configure"
      }
    }
    stage("Build ISCE3") {
      parallel {
        stage("Compile ISCE3 source") {
          steps {
            sh "/usr/local/bin/python3 tools/run.py build"
          }
        }
        stage("Build and deploy ISCE3 documentation") {
          steps {
            sh "/usr/local/bin/python3 tools/run.py docsbuild"
            // sh "/usr/local/bin/python3 tools/run.py prdocs"
          }
        }
      }
    }
    stage("Run ISCE3 unit tests") {
      steps {
        sh "/usr/local/bin/python3 tools/run.py test"
      }
    }
    stage("Build ISCE3 redistributable image") {
      steps {
        sh "/usr/local/bin/python3 tools/run.py makepkg"
        sh "/usr/local/bin/python3 tools/run.py makedistrib"
      }
    }
    /*
    XXX Full workflow tests are disabled in this job until we adopt a large file
    management solution w/ caching (e.g. git-lfs). Disk utilization is
    currently too high and causes the CI server to crash.
    stage("Fetch workflow test data") {
      steps {
        sh "/usr/local/bin/python3 tools/run.py fetchdata"
      }
    }
    stage("Run workflow tests") {
      parallel {
        stage("Run RSLC test") {
          steps {
            sh "/usr/local/bin/python3 tools/run.py rslctest"
          }
        }
        stage("Run GSLC test") {
          steps {
            sh "/usr/local/bin/python3 tools/run.py gslctest"
          }
        }
        stage("Run GCOV test") {
          steps {
            sh "/usr/local/bin/python3 tools/run.py gcovtest"
          }
        }
      }
    }
    */
    stage("Fetch minimum workflow test data") {
      steps {
        sh "/usr/local/bin/python3 tools/run.py fetchmindata"
      }
    }
    stage("Install NISAR QA and CalTools") {
      steps {
        sh "/usr/local/bin/python3 tools/run.py makedistrib_nisar"
      }
    }
    stage("Run minimum workflow tests") {
      steps {
        sh "/usr/local/bin/python3 tools/run.py mintests"
      }
    }
    stage("Run qa for minimum workflow tests") {
      steps {
        sh "/usr/local/bin/python3 tools/run.py minqa"
      }
    }
    stage("Push image to docker registry") {
      steps {
        sh "/usr/local/bin/python3 tools/run.py push"
        mail to: "mariyetta.madatyan@jpl.nasa.gov",
          subject: "[Jenkins] NISAR ADT image upload successful",
          body: """A new NISAR ADT devel image was uploaded to:
            |https://artifactory.jpl.nasa.gov/artifactory/docker-develop-local/gov/nasa/jpl/nisar/adt/nisar-adt/isce3/devel
            |
            |This is an automated message triggered by ${currentBuild.absoluteUrl}
            |""".stripMargin()
      }
    }
  }
  post {
    always {
      echo "Publishing xUnit test result report"
      xunit (
        thresholds: [
          skipped (
            unstableThreshold: '0',
            unstableNewThreshold: '0'
          ),
          failed (
            unstableThreshold: '0',
            unstableNewThreshold: '0'
          )
        ],
        tools: [
          CTest (
            pattern: 'build-docker/Testing/*/Test.xml',
            skipNoTestFiles: false,
            failIfNotNew: true,
            deleteOutputFiles: true,
            stopProcessingIfError: true
          )
        ]
      )
      deleteDir()
    }
    success {
      echo 'I succeeded!'
    }
    unstable {
      echo 'I am unstable :/ Emailing PR author and one of the ISCE3 maintainers.'
      emailStatus()
    }
    failure {
      echo 'I failed :( Emailing PR author and one of the ISCE3 maintainers.'
      emailStatus()
    }
    changed {
      echo 'Things were different before...'
    }
  }
}

def emailStatus() {
      mail to: 'geoffrey.m.gunter@jpl.nasa.gov',
          subject: "ISCE3 build ${currentBuild.result}: ${currentBuild.fullDisplayName}",
          body: "Minimum workflow test ${currentBuild.result}: ${env.BUILD_URL}"
      emailext(
          subject: "ISCE3 build ${currentBuild.result}: ${currentBuild.fullDisplayName}",
          body: "Minimum workflow test ${currentBuild.result}: ${env.BUILD_URL}",
          recipientProviders: [[$class: 'DevelopersRecipientProvider']]
      )
}
