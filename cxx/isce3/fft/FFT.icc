#ifndef ISCE_FFT_FFT_ICC
#error "FFT.icc is an implementation detail of FFT.h"
#endif

#include <algorithm>

#include "detail/ConfigureFFTLayout.h"
#include "detail/Threads.h"

namespace isce3 { namespace fft {

template<typename T>
inline
FwdFFTPlan<T> planfft1d(std::complex<T> * out, std::complex<T> * in, int n)
{
    return FwdFFTPlan<T>(out, in, n);
}

template<typename T>
inline
FwdFFTPlan<T> planfft1d(std::complex<T> * out, T * in, int n)
{
    return FwdFFTPlan<T>(out, in, n);
}

template<typename T>
inline
FwdFFTPlan<T> planfft1d(std::complex<T> * out, std::complex<T> * in, const int (&dims)[2], int axis)
{
    int n, stride, dist, batch;
    detail::configureFFTLayout(&n, &stride, &dist, &batch, dims, axis);
    int threads = std::min(batch, detail::getMaxThreads());
    return FwdFFTPlan<T>(out, in, n, n, stride, dist, batch, FFTW_MEASURE, threads);
}

template<typename T>
inline
FwdFFTPlan<T> planfft1d(std::complex<T> * out, T * in, const int (&dims)[2], int axis)
{
    int n, stride, dist, batch;
    detail::configureFFTLayout(&n, &stride, &dist, &batch, dims, axis);
    int threads = std::min(batch, detail::getMaxThreads());
    return FwdFFTPlan<T>(out, in, n, n, stride, dist, batch, FFTW_MEASURE, threads);
}

template<typename T>
inline
FwdFFTPlan<T> planfft2d(std::complex<T> * out, std::complex<T> * in, const int (&dims)[2])
{
    return FwdFFTPlan<T>(out, in, dims, 1, FFTW_MEASURE, detail::getMaxThreads());
}

template<typename T>
inline
FwdFFTPlan<T> planfft2d(std::complex<T> * out, T * in, const int (&dims)[2])
{
    return FwdFFTPlan<T>(out, in, dims, 1, FFTW_MEASURE, detail::getMaxThreads());
}

template<typename T>
inline
InvFFTPlan<T> planifft1d(std::complex<T> * out, std::complex<T> * in, int n)
{
    return InvFFTPlan<T>(out, in, n);
}

template<typename T>
inline
InvFFTPlan<T> planifft1d(T * out, std::complex<T> * in, int n)
{
    return InvFFTPlan<T>(out, in, n);
}

template<typename T>
inline
InvFFTPlan<T> planifft1d(std::complex<T> * out, std::complex<T> * in, const int (&dims)[2], int axis)
{
    int n, stride, dist, batch;
    detail::configureFFTLayout(&n, &stride, &dist, &batch, dims, axis);
    int threads = std::min(batch, detail::getMaxThreads());
    return InvFFTPlan<T>(out, in, n, n, stride, dist, batch, FFTW_MEASURE, threads);
}

template<typename T>
inline
InvFFTPlan<T> planifft1d(T * out, std::complex<T> * in, const int (&dims)[2], int axis)
{
    int n, stride, dist, batch;
    detail::configureFFTLayout(&n, &stride, &dist, &batch, dims, axis);
    int threads = std::min(batch, detail::getMaxThreads());
    return InvFFTPlan<T>(out, in, n, n, stride, dist, batch, FFTW_MEASURE, threads);
}

template<typename T>
inline
InvFFTPlan<T> planifft2d(std::complex<T> * out, std::complex<T> * in, const int (&dims)[2])
{
    return InvFFTPlan<T>(out, in, dims, 1, FFTW_MEASURE, detail::getMaxThreads());
}

template<typename T>
inline
InvFFTPlan<T> planifft2d(T * out, std::complex<T> * in, const int (&dims)[2])
{
    return InvFFTPlan<T>(out, in, dims, 1, FFTW_MEASURE, detail::getMaxThreads());
}

template<typename T>
inline
void fft1d(std::complex<T> * out, const std::complex<T> * in, int n)
{
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<std::complex<T>*>(in);
    FwdFFTPlan<T> plan(out, mutable_in, n, 1, FFTW_ESTIMATE);
    plan.execute();
}

template<typename T>
inline
void fft1d(std::complex<T> * out, const T * in, int n)
{
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<T*>(in);
    FwdFFTPlan<T> plan(out, mutable_in, n, 1, FFTW_ESTIMATE);
    plan.execute();
}

template<typename T>
inline
void fft1d(std::complex<T> * out, const std::complex<T> * in, const int (&dims)[2], int axis)
{
    int n, stride, dist, batch;
    detail::configureFFTLayout(&n, &stride, &dist, &batch, dims, axis);
    int threads = std::min(batch, detail::getMaxThreads());
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<std::complex<T>*>(in);
    FwdFFTPlan<T> plan(out, mutable_in, n, n, stride, dist, batch, FFTW_ESTIMATE, threads);
    plan.execute();
}

template<typename T>
inline
void fft1d(std::complex<T> * out, const T * in, const int (&dims)[2], int axis)
{
    int n, stride, dist, batch;
    detail::configureFFTLayout(&n, &stride, &dist, &batch, dims, axis);
    int threads = std::min(batch, detail::getMaxThreads());
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<T*>(in);
    FwdFFTPlan<T> plan(out, mutable_in, n, n, stride, dist, batch, FFTW_ESTIMATE, threads);
    plan.execute();
}

template<typename T>
inline
void fft2d(std::complex<T> * out, const std::complex<T> * in, const int (&dims)[2])
{
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<std::complex<T>*>(in);
    FwdFFTPlan<T> plan(out, mutable_in, dims, 1, FFTW_ESTIMATE, detail::getMaxThreads());
    plan.execute();
}

template<typename T>
inline
void fft2d(std::complex<T> * out, const T * in, const int (&dims)[2])
{
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<T*>(in);
    FwdFFTPlan<T> plan(out, mutable_in, dims, 1, FFTW_ESTIMATE, detail::getMaxThreads());
    plan.execute();
}

template<typename T>
inline
void ifft1d(std::complex<T> * out, const std::complex<T> * in, int n)
{
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<std::complex<T>*>(in);
    InvFFTPlan<T> plan(out, mutable_in, n, 1, FFTW_ESTIMATE);
    plan.execute();
}

template<typename T>
inline
void ifft1d(T * out, const std::complex<T> * in, int n)
{
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<std::complex<T>*>(in);
    InvFFTPlan<T> plan(out, mutable_in, n, 1, FFTW_ESTIMATE);
    plan.execute();
}

template<typename T>
inline
void ifft1d(std::complex<T> * out, const std::complex<T> * in, const int (&dims)[2], int axis)
{
    int n, stride, dist, batch;
    detail::configureFFTLayout(&n, &stride, &dist, &batch, dims, axis);
    int threads = std::min(batch, detail::getMaxThreads());
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<std::complex<T>*>(in);
    InvFFTPlan<T> plan(out, mutable_in, n, n, stride, dist, batch, FFTW_ESTIMATE, threads);
    plan.execute();
}

template<typename T>
inline
void ifft1d(T * out, const std::complex<T> * in, const int (&dims)[2], int axis)
{
    int n, stride, dist, batch;
    detail::configureFFTLayout(&n, &stride, &dist, &batch, dims, axis);
    int threads = std::min(batch, detail::getMaxThreads());
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<std::complex<T>*>(in);
    InvFFTPlan<T> plan(out, mutable_in, n, n, stride, dist, batch, FFTW_ESTIMATE, threads);
    plan.execute();
}

template<typename T>
inline
void ifft2d(std::complex<T> * out, const std::complex<T> * in, const int (&dims)[2])
{
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<std::complex<T>*>(in);
    InvFFTPlan<T> plan(out, mutable_in, dims, 1, FFTW_ESTIMATE, detail::getMaxThreads());
    plan.execute();
}

template<typename T>
inline
void ifft2d(T * out, const std::complex<T> * in, const int (&dims)[2])
{
    // FFTW_ESTIMATE is a special case where the input arrays are not modified.
    auto mutable_in = const_cast<std::complex<T>*>(in);
    InvFFTPlan<T> plan(out, mutable_in, dims, 1, FFTW_ESTIMATE, detail::getMaxThreads());
    plan.execute();
}

}}
